# -*- coding: utf-8 -*-
"""VinBigData_Depuration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q_kmldssseHfgTB8tLxQyeLutujm2Kel
"""

import numpy as np
from shapely.geometry import Polygon
from tqdm import tqdm

train_file="detectron2-venv/VinBigData/archive/train_W_H.csv"

def calculate_iou(box_1, box_2):
  x1=box_1[0][0]
  y1=box_1[0][1]
  a1=box_1[2][0]
  b1=box_1[2][1]

  x2=box_2[0][0]
  y2=box_2[0][1]
  a2=box_2[2][0]
  b2=box_2[2][1]
  area1 = (a1-x1)*(b1-y1);
  area2 = (a2-x2)*(b2-y2);

  # Now we need to find the intersection box
  # to do that, find the largest (x, y) coordinates 
  # for the start of the intersection bounding box and 
  # the smallest (x, y) coordinates for the 
  # end of the intersection bounding box
  xx = max(x1, x2)
  yy = max(y1, y2)
  aa = min(a1, a2)
  bb = min(b1, b2)

  # So the intersection BBox has the coordinates (xx,yy) (aa,bb)
  # compute the width and height of the intersection bounding box
  w = max(0, aa - xx)
  h = max(0, bb - yy)

  # find the intersection area
  intersection_area = w*h

  # find the union area of both the boxes
  union_area = area1 + area2 - intersection_area

  # compute the ratio of overlap between the computed
  # bounding box and the bounding box in the area list
  IoU = intersection_area / union_area
  return IoU

import itertools
for key in dic_boxes['0007d316f756b3fa0baea2ff514ce945'] :
  if (isinstance(key,int)):
    print(key)
    for a, b in itertools.combinations(dic_boxes['0007d316f756b3fa0baea2ff514ce945'][key], 2):
      iou=calculate_iou(a,b)
      #IoU(np.array(a),np.array(b))
      print(a,b,iou)
      #print(iou)

dic_boxes = {}
def generate_validation(file_name):

  arch = open(file_name)
  arch.readline()
  min_overlap = 0.13
  
  
  for linea in arch:
      file,disease,id_disease,doctor,x_min,y_min,x_max,y_max,width,height = linea.strip().split(",")

      if id_disease == "14":
          dic_boxes[file] = {int(id_disease) : [[1,0,0,0]]}
      else:
          if file not in dic_boxes:
              dic_boxes[file] = {}

          id_disease, x_min, y_min, x_max, y_max = int(id_disease), int(float(x_min)), int(float(y_min)), int(float(x_max)), int(float(y_max))
          box = [[x_min, y_min], [x_max, y_min], [x_max, y_max], [x_min, y_max]]
          if id_disease not in dic_boxes[file]:
              dic_boxes[file][id_disease] = [box]

              
          else:
              for box2 in dic_boxes[file][id_disease]:
                  if box != box2:
                      dic_boxes[file][id_disease].append(box)
                      break
              for a, b in itertools.combinations(dic_boxes[file][id_disease], 2):
                    iou=calculate_iou(a,b)
                    if(iou<=min_overlap):
                      dic_boxes[file][id_disease].remove(a)
                      #dic_boxes[file][id_disease]=a
                      #dic_boxes[file][id_disease].append(b)


          #Implementar un mÃ©todo que compare todos contra todos
      dic_boxes[file].update({"width":width,"height":height })
  arch.close()
  print("creating file...")

generate_validation(train_file)

dic_boxes['0007d316f756b3fa0baea2ff514ce945']

arch = open("trainSelect.csv","w")

arch.write("image_id,class_name,class_id,rad_id,x_min,y_min,x_max,y_max,width,height\n")
last_file = ""

mean_values = True  #True: mean of boundings, False: Min/Max boudings

for file,dic_diseases in dic_boxes.items():
    enter = False
    for id_disease,lst_boxes in dic_diseases.items():
        width = int(dic_diseases["width"])
        height = int(dic_diseases["height"])
        doctor = "consensus"
        disease = id_disease       
        if isinstance(lst_boxes, list):
          if id_disease == 14:
              #arch.write("%s 1,0,0,1,1,%d\n" % (file,id_disease))
              arch.write("%s,%s,%d,%s,,,,,%d,%d\n" % (file,disease,id_disease,doctor,width,height))
          else:
              if len(lst_boxes)>1:
                  #print(file,id_disease,lst_boxes)
                  #if last_file != file:

                  last_file = file

                  lst_x_mins = []; lst_y_mins = []; lst_x_maxs = []; lst_y_maxs = []

                  for lst_box in lst_boxes:
                      x_min, y_min, x_max, y_max = lst_box[0][0], lst_box[0][1], lst_box[2][0], lst_box[2][1]
                      lst_x_mins.append(x_min)
                      lst_y_mins.append(y_min)
                      lst_x_maxs.append(x_max)
                      lst_y_maxs.append(y_max)

                  arr_x_mins = np.array(lst_x_mins);arr_y_mins = np.array(lst_y_mins);arr_x_maxs = np.array(lst_x_maxs);arr_y_maxs = np.array(lst_y_maxs)
                  if mean_values:
                      x_min2,y_min2,x_max2,y_max2 = int(arr_x_mins.mean()),int(arr_y_mins.mean()),int(arr_x_maxs.mean()),int(arr_y_maxs.mean())
                  else:
                      x_min2, y_min2, x_max2, y_max2 = min(arr_x_mins), min(arr_y_mins), max(arr_x_maxs), max(arr_y_maxs)


                  arch.write("%s,%s,%d,%s,%d,%d,%d,%d,%d,%d\n" % (file,disease,id_disease,doctor,x_min2, y_min2, x_max2, y_max2, width, height))

        
        
    
arch.close()

print("FINISH!")

dic_boxes['0007d316f756b3fa0baea2ff514ce945']

dic_boxes.items()